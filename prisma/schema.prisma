// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tablas maestros

model Usuario {
  id               Int      @id @default(autoincrement())
  nombres          String   @db.Char(100)
  apellidos        String   @db.Char(100)
  username         String   @db.Char(100)@unique
  password         String   @db.Char(100)
  fecha_nacimiento DateTime @db.Date
  tipo_cedula      String   @db.Char(100)
  cedula           BigInt   @db.BigInt
  correo           String   @db.Char(100)
  telefono         String?  @db.Char(100)
  ente_id          Int
  ente             Ente     @relation(fields: [ente_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  citas_solicitadas Cita[] @relation("UsuarioCita")
  citas_paciente    Cita[] @relation("PacienteCita")

  beneficiarios UsuarioOnBeneficiario[] @relation("UsuarioBeneficiario")
  usuarios      UsuarioOnBeneficiario[] @relation("BeneficiarioUsuario")

  historial          Historia[]     @relation("UsuarioHistoria")
  historiasPacientes Historia[]     @relation("PacienteHistoria")
  rolOnUsuario       RolOnUsuario[]

  UsuarioArticulo UsuarioArticulo[]

  UsuarioDetalles       UsuarioDetalles?
  DepartamentoOnUsuario DepartamentoOnUsuario[]
  UsuarioOnServicio     UsuarioOnServicio[]
  ColaPacientes         ColaPacientes[]

  @@unique([tipo_cedula, cedula])
  @@map("usuarios")
}

model UsuarioDetalles {
  id         Int     @id @default(autoincrement())
  usuario_id Int     @unique
  usuario    Usuario @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  patologias String?
  alergias   String?
  cirugias   String?

  @@map("usuarios_detalles")
}

model Cita {
  id             Int      @id @default(autoincrement())
  fecha_solictud DateTime
  fecha_cita     DateTime
  estado         String

  usuario_id Int
  usuario    Usuario @relation("UsuarioCita", fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  paciente_id Int
  paciente    Usuario @relation("PacienteCita", fields: [paciente_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  departamento_id Int
  departamento    Departamento @relation(fields: [departamento_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("citas")
}

model Ente {
  id      Int       @id @default(autoincrement())
  nombre  String    @db.Char(100)
  Usuario Usuario[]

  @@map("entes")
}

model Almacen {
  id              Int                 @id @default(autoincrement())
  cubiculo        String
  descripcion     String
  articulos       ArticuloOnAlmacen[]
  Ingreso         Ingreso[]
  UsuarioArticulo UsuarioArticulo[]

  @@map("almacenes")
}

model Articulo {
  id              Int                 @id @default(autoincrement())
  nombre          String
  cantidad        Int
  almacenes       ArticuloOnAlmacen[]
  Ingreso         Ingreso[]
  UsuarioArticulo UsuarioArticulo[]

  @@map("articulos")
}

model Departamento {
  id       Int    @id @default(autoincrement())
  nombre   String @db.Char(100)
  cubiculo String @db.Char(100)

  Cita          Cita[]
  Historia      Historia[]
  Usuarios      DepartamentoOnUsuario[]
  ColaPacientes ColaPacientes[]

  @@map("departamentos")
}

model Historia {
  id Int @id @default(autoincrement())

  usuario_id Int
  usuario    Usuario @relation("UsuarioHistoria", fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  paciente_id Int
  paciente    Usuario @relation("PacienteHistoria", fields: [paciente_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  departamento_id Int
  departamento    Departamento @relation(fields: [departamento_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  fecha_atencion   DateTime @db.Date
  sintomas         String   @db.Char(1000)
  diagnostico      String   @db.Char(100)
  tratamiento      String?  @db.Char(100)
  peso_paciente    Decimal? @db.Decimal
  tension_paciente String
  medida_cintura   Decimal? @db.Decimal
  medida_cadera    Decimal? @db.Decimal

  @@map("historias")
}

model Ingreso {
  id Int @id @default(autoincrement())

  articulo_id Int
  articulo    Articulo @relation(fields: [articulo_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  almacen_id Int
  almacen    Almacen @relation(fields: [almacen_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  cantidad      Int
  fecha_ingreso DateTime @db.Date

  @@map("ingresos")
}

model Rol {
  id     Int    @id @default(autoincrement())
  nombre String @db.Char(100)

  usuarios     RolOnUsuario[]
  RolOnPermiso RolOnPermiso[]

  @@map("roles")
}

model Permiso {
  id           Int            @id @default(autoincrement())
  nombre       String         @db.Char(100)
  RolOnPermiso RolOnPermiso[]

  @@map("permisos")
}

model Servicio {
  id                Int                 @id @default(autoincrement())
  nombre            String              @db.Char(100)
  UsuarioOnServicio UsuarioOnServicio[]

  @@map("servicios")
}

model UsuarioArticulo {
  id Int @id @default(autoincrement())

  usuario_id Int
  usuario    Usuario @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  articulo_id Int
  articulo    Articulo @relation(fields: [articulo_id], references: [id], onDelete: Cascade)

  almacen_id Int
  almacen    Almacen @relation(fields: [almacen_id], references: [id], onDelete: Cascade)

  cantidad Int

  fecha_retiro DateTime @db.Date

  @@map("usuarios_articulos")
}

model ColaPacientes {
  id              Int          @id @default(autoincrement())
  usuario_id      Int
  usuario         Usuario      @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  departamento_id Int
  departamento    Departamento @relation(fields: [departamento_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("colas_pacientes")
}

// Tablas pivotes

model UsuarioOnBeneficiario {
  usuario_id      Int
  usuario         Usuario @relation("UsuarioBeneficiario", fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  beneficiario_id Int
  beneficiario    Usuario @relation("BeneficiarioUsuario", fields: [beneficiario_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([usuario_id, beneficiario_id])
  @@map("usuarios_on_beneficiarios")
}

model RolOnUsuario {
  rol_id     Int
  rol        Rol     @relation(fields: [rol_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuario_id Int
  usuario    Usuario @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([rol_id, usuario_id])
  @@map("roles_on_usuarios")
}

model RolOnPermiso {
  id         Int     @id @default(autoincrement())
  permiso_id Int
  permiso    Permiso @relation(fields: [permiso_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rol_id     Int
  rol        Rol     @relation(fields: [rol_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([permiso_id, rol_id])
  @@map("roles_on_permisos")
}

model DepartamentoOnUsuario {
  departamento_id Int
  departamento    Departamento @relation(fields: [departamento_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuario_id      Int
  usuario         Usuario      @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([departamento_id, usuario_id])
  @@map("departamentos_on_usuarios")
}

model UsuarioOnServicio {
  usuario_id  Int
  usuario     Usuario  @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  servicio_id Int
  servicio    Servicio @relation(fields: [servicio_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  fecha_emision  DateTime  @db.Date
  feha_recepcion DateTime? @db.Date
  resultados     String?   @db.Char(1000)

  @@id([usuario_id, servicio_id])
  @@map("usuarios_on_servicios")
}

model ArticuloOnAlmacen {
  almacen_id  Int
  almacen     Almacen  @relation(fields: [almacen_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articulo_id Int
  articulo    Articulo @relation(fields: [articulo_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([almacen_id, articulo_id])
  @@map("articulos_on_almacenes")
}